<html>

<head>
  <meta charset="UTF-8">
  <title>INFO 3300 - Aug 30</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">

  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/styles/default.min.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/highlight.min.js"></script>

</head>

<body>
  <div class="container larger">
    <h3>Prompt for Monday, August 30</h3>
    <p>
      HW1 is now available on CMS. If you are on the waitlist you should also have CMS access -- but you will receive a
      short extension for any assignments before your enrollment date.
    </p>
    <p>
      You can access these files from the <a href="https://github.com/jeffrz/info3300-fa2021">course Github
        repository</a> Here is an <a href="http://rogerdudler.github.io/git-guide/">informal guide to git</a>.
    </p>
    <p>
      To develop efficiently, have a local web server running. Python has a simple, built-in server. Use <tt>python -m
        http.server</tt> for python 3; use <tt>python -m SimpleHTTPServer 8000</tt> for python 2 (execute "python" in
      cmd for version number). You probably have python 3.
    </p>
    <p>
      We will be working in Javascript for most of the term. It can act pretty oddly, especially in comparison to
      languages that strictly type objects. <br />
      What are some of the unusual aspects of this language? Open a console in your browser...
    </p>
    <p>
      Time permitting, let's also review <a href="https://www.json.org/json-en.html">Javascript Object Notation</a>.
    </p>

    <svg width=100 height=100>
      <rect id="rectangle" x=10 y=10 width=80 height=80 fill="steelblue" />
    </svg>


    <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
    <h5>Code for today:</h5>
    <pre id="display1" class="hljs javascript">
      </pre>
    <pre id="display2" class="hljs javascript">
      </pre>


    <!--- Code for today's class --->
    <script id="notes1">

      // Try pasting these commands into your browser console

      // Console.log is our friend
      console.log('Hello World');

      // Let's explore some Javascript types!
      console.log("--- Checking out some types ---")
      console.log(typeof (1))
      console.log(typeof (1.2))
      console.log(typeof (Math.PI))
      console.log(typeof ("hello"))
      // unicode is still considered a string








      // Learn a bit more about Objects
      console.log("--- Testing [] and {} ---")

      console.log(typeof (new Object()))
      console.log(typeof (Math))
      console.log(typeof (console.log))
      console.log(typeof (undefined))
      console.log(typeof (null))


      console.log(typeof ([1, 2, 3]))


      // So what can accept keys?
      console.log("--- So what works like a dict? ---");
      console.log(typeof ({ "a": 1, "b": 2 }))
      dict = { "a": 1, "b": 2 }
      dict["a"]
      dict.a // also accesses "a"

      let differentTypes = [3, "hello", new Object(), [1, 2, 3], function (x) { }, console];
      // both types break the dictionary: let differentTypes = [undefined, null];
      for (let item of differentTypes) {
        console.log(item, typeof (item));
        item['test'] = "keyAdded";
        console.log(item['test']);
      }



      // Types can get a bit unexpected in JS
      console.log("--- Now exploring type coercion ---")
      console.log(3 + "hello")
      console.log("2" + 1)
      console.log(typeof (false))
      console.log(false + 1)
      console.log(false + "Patel")
      console.log([1, 2, 3] + "2")



      // Why does this matter?
      let color = "red"
      document.getElementById("rectangle").setAttribute("fill", color)
      let color1 = 2
      document.getElementById("rectangle").setAttribute("fill", color1) // turns black
      let color2 = null
      document.getElementById("rectangle").setAttribute("fill", color2) // turns black
      let color3 = undefined
      document.getElementById("rectangle").setAttribute("fill", color3) // turns black



      // Comparison weirdness
      console.log("--- Now trying some comparisons ---");

      console.log((true + 1) == "2"); // true
      console.log(0 == "0"); // true
      console.log([1] == true); // true
      console.log([[[[]]]] == 0); // true

      console.log("0" === 0); // false

      // Use === for comparison





      // Shortcircuiting of logical statements
      console.log("--- Shortcircuiting ---");
      // let test = "hello";
      // console.log(test);

      true || console.log("logged-or") || false; // already true, so shortcircuited the "or"
      true && console.log("logged-and") && false;
      false && console.log("logged-and") && false;



    </script>


    <script id="notes2">

      // How do two script tags interact with each other?
      let test = "script tags. how do they work?";


      // * Let's talk JSON
      let obj = [{ "name": "DDWA", "number": 3300 }, { "name": "Java", "number": 2110 }, { "name": "Python", "number": 1110 }];
      console.log(obj);
      let jsonObj = JSON.stringify(obj);
      console.log(jsonObj);

      let recoveredObject = JSON.parse(jsonObj);
      console.log(recoveredObject);



      // This one won't parse because it breaks JSON specifications
      // let badStr = '{"list": ["commas,", "single_quo\'tes", "double_quo"tes", "@sÃ§i|"], "nestedObject": {"undefined": undefined, "defined": 3.1415926535}, "Infinity": Infinity, "NaN": NaN, "bool": true}'





    </script>






    <!--- calls the highlight library to fill the <pre> tag with code --->
    <script>
      document.getElementById("display1").innerText = document.getElementById("notes1").innerText;
      document.getElementById("display2").innerText = document.getElementById("notes2").innerText;
      hljs.highlightAll();
    </script>

  </div>
</body>

</html>